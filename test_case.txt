#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <memory>
// Assume other necessary includes for ATM, Bank, Account classes

int main() {
    try {
        std::cout << "=== ATM System Test Cases ===" << std::endl;
        
        // ===== Test Case Group 1: System Setup (REQ1.x) =====
        std::cout << "\n[Test Group 1: System Setup]" << std::endl;
        
        // REQ1.1 & 1.2: ATM Creation with Serial Number and Type
        std::cout << "\nTest 1.1 & 1.2: Creating ATMs" << std::endl;
        ATM singleBankAtm(315785, ATMType::SINGLE_BANK);  // 6-digit serial
        ATM multiBankAtm(315786, ATMType::MULTI_BANK);
        
        // REQ1.3: Language Configuration
        std::cout << "\nTest 1.3: Language Configuration" << std::endl;
        singleBankAtm.setLanguageMode(LanguageMode::UNILINGUAL);
        multiBankAtm.setLanguageMode(LanguageMode::BILINGUAL);
        
        // REQ1.4: Initial Cash Deposit to ATM
        std::cout << "\nTest 1.4: Initial Cash Loading" << std::endl;
        std::map<int, int> initialCash = {
            {50000, 10},  // 10 bills of 50,000 KRW
            {10000, 20},  // 20 bills of 10,000 KRW
            {5000, 30},   // 30 bills of 5,000 KRW
            {1000, 40}    // 40 bills of 1,000 KRW
        };
        singleBankAtm.loadCash(initialCash);
        
        // REQ1.5-1.7: Bank Account Creation
        std::cout << "\nTest 1.5-1.7: Account Creation" << std::endl;
        Bank kakaoBank("Kakao");
        Bank shinhanBank("Shinhan");
        
        Account acc1 = kakaoBank.createAccount("Jenny", "111111111111", 100000);
        Account acc2 = kakaoBank.createAccount("Jenny", "222222222222", 200000);
        Account acc3 = shinhanBank.createAccount("Jenny", "333333333333", 300000);
        
        // ===== Test Case Group 2: Session Management (REQ2.x) =====
        std::cout << "\n[Test Group 2: Session Management]" << std::endl;
        
        // REQ2.1: Session Start
        std::cout << "\nTest 2.1: Starting Session" << std::endl;
        Card userCard("111111111111", "1234");  // account number and PIN
        singleBankAtm.insertCard(userCard);
        
        // REQ2.2: Session End
        std::cout << "\nTest 2.2: Ending Session" << std::endl;
        singleBankAtm.endSession();
        
        // ===== Test Case Group 3: Authorization (REQ3.x) =====
        std::cout << "\n[Test Group 3: Authorization]" << std::endl;
        
        // REQ3.1-3.2: Valid/Invalid Card Check
        std::cout << "\nTest 3.1-3.2: Card Validation" << std::endl;
        Card validCard("111111111111", "1234");
        Card invalidCard("999999999999", "1234");
        
        singleBankAtm.insertCard(validCard);    // Should succeed
        singleBankAtm.insertCard(invalidCard);  // Should fail
        
        // REQ3.3-3.5: Password Verification
        std::cout << "\nTest 3.3-3.5: Password Verification" << std::endl;
        singleBankAtm.verifyPassword("1234");   // Correct password
        singleBankAtm.verifyPassword("9999");   // Wrong password
        
        // ===== Test Case Group 4: Deposit (REQ4.x) =====
        std::cout << "\n[Test Group 4: Deposit Operations]" << std::endl;
        
        // REQ4.1-4.6: Cash and Check Deposit
        std::cout << "\nTest 4.1-4.6: Deposit Operations" << std::endl;
        std::map<int, int> depositCash = {
            {50000, 1},  // 1 bill of 50,000 KRW
            {10000, 2},  // 2 bills of 10,000 KRW
            {5000, 1},   // 1 bill of 5,000 KRW
            {1000, 3}    // 3 bills of 1,000 KRW
        };
        singleBankAtm.deposit(depositCash);  // Cash deposit
        singleBankAtm.depositCheck(150000);  // Check deposit
        
        // ===== Test Case Group 5: Withdrawal (REQ5.x) =====
        std::cout << "\n[Test Group 5: Withdrawal Operations]" << std::endl;
        
        // REQ5.1-5.7: Withdrawal Tests
        std::cout << "\nTest 5.1-5.7: Withdrawal Operations" << std::endl;
        singleBankAtm.withdraw(17000);     // Should dispense optimal denomination
        singleBankAtm.withdraw(600000);    // Should fail (exceeds limit)
        
        // ===== Test Case Group 6: Transfer (REQ6.x) =====
        std::cout << "\n[Test Group 6: Transfer Operations]" << std::endl;
        
        // REQ6.1-6.7: Transfer Tests
        std::cout << "\nTest 6.1-6.7: Transfer Operations" << std::endl;
        // Cash transfer
        std::map<int, int> transferCash = {
            {10000, 2},  // 2 bills of 10,000 KRW
            {5000, 1}    // 1 bill of 5,000 KRW
        };
        singleBankAtm.cashTransfer("222222222222", transferCash);
        
        // Account transfer
        singleBankAtm.accountTransfer("111111111111", "222222222222", 50000);
        
        // ===== Test Case Group 7: Admin Functions (REQ7.x) =====
        std::cout << "\n[Test Group 7: Admin Operations]" << std::endl;
        
        // REQ7.1-7.3: Transaction History
        std::cout << "\nTest 7.1-7.3: Transaction History" << std::endl;
        Card adminCard("ADMIN", "ADMIN");
        singleBankAtm.insertCard(adminCard);
        singleBankAtm.displayTransactionHistory();
        
        // ===== Test Case Group 8: Language Support (REQ8.x) =====
        std::cout << "\n[Test Group 8: Language Support]" << std::endl;
        
        // REQ8.1-8.2: Language Selection
        std::cout << "\nTest 8.1-8.2: Language Selection" << std::endl;
        multiBankAtm.setLanguage(Language::ENGLISH);
        multiBankAtm.setLanguage(Language::KOREAN);
        
        // ===== Test Case Group 9: Exception Handling (REQ9.x) =====
        std::cout << "\n[Test Group 9: Exception Handling]" << std::endl;
        
        // REQ9.1: Various Exception Scenarios
        std::cout << "\nTest 9.1: Exception Scenarios" << std::endl;
        singleBankAtm.withdraw(999999);  // Exceeds maximum withdrawal
        singleBankAtm.verifyPassword("wrong_password");  // Wrong password
        
        // ===== Test Case Group 10: System State Display (REQ10.x) =====
        std::cout << "\n[Test Group 10: System State Display]" << std::endl;
        
        // REQ10.1: Display ATM and Account Status
        std::cout << "\nTest 10.1: System State Display" << std::endl;
        singleBankAtm.displayStatus();
        kakaoBank.displayAllAccounts();
        
        std::cout << "\n=== All Test Cases Completed ===" << std::endl;
        
    } catch (const std::exception& e) {
        std::cerr << "Error occurred during testing: " << e.what() << std::endl;
        return 1;
    }
    
    return 0;
}